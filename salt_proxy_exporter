#!/usr/bin/env python3
# node_exporter_proxy, written by Sergio Duran (July/2019)

from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn
from subprocess import Popen, PIPE
from argparse import ArgumentParser
import json
import yaml
import sys
import os

try:
    with open(os.path.join(os.path.dirname(__file__), 
            'salt_proxy_exporter.yml')) as cfgfile:
        cfg = yaml.load(cfgfile)
except FileNotFoundError:
    print('Config file salt_proxy_exporter.yml not found', 
          file=sys.stderr)
    sys.exit(1)

# parse command line arguments
parser = ArgumentParser('salt_proxy_exporter')
parser.add_argument('--address',
    default=cfg.get('address', None),
    type=str,
    help='Address to bind to'
)
parser.add_argument('--port',
    default=cfg.get('port', None),
    type=int,
    help='Port to bind to'
)
args = parser.parse_args()
        
# Receives requests, splits the query string extracting the first part 
# (the sensor name) and then tells salt to connect to the minion to get 
# its node_exporter stats
class ProxyHTTPServer(BaseHTTPRequestHandler):
    def error(self, sensor, message):
        self.send_response(500)
        self.end_headers()

        print('%s: %s'%(sensor, message.decode()))
        self.wfile.write(message)
    
    def do_GET(self):
        sensor = self.path[1:]

        cmd = Popen(
            ['salt', '--out=json', '--static', sensor, 'cmd.run', cfg['remote_command']],
            stdout=PIPE, stderr=PIPE, close_fds=True
        )
        (stdout, stderr) = cmd.communicate()

        if cmd.returncode != 0:
            self.error(sensor, stderr)
            return

        response = json.loads(stdout.decode())

        if sensor not in response or response[sensor]=='':
            self.error(sensor, b'Invalid response')
            return

        self.send_response(200)
        self.end_headers()

        self.wfile.write(response[sensor].encode())


class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """ Handle requests in a separate thread."""

print('Binding Salt Proxy Exporter to %s:%s'%(args.address, args.port))
httpd = ThreadedHTTPServer((args.address, args.port), ProxyHTTPServer)
httpd.serve_forever()

